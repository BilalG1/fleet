/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Projects */
        get: operations["get_projects_project_get"];
        put?: never;
        /** Create Project */
        post: operations["create_project_project_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{project_id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Project Settings */
        post: operations["update_project_settings_project__project_id__settings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{project_id}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tasks */
        get: operations["get_tasks_project__project_id__tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Task */
        post: operations["create_task_task_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Task */
        get: operations["get_task_task__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Read Events */
        post: operations["read_events_task__task_id__events_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Messages */
        get: operations["get_messages_task__task_id__messages_get"];
        put?: never;
        /** Create Message */
        post: operations["create_message_task__task_id__messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}/tool-calls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute Tool Calls
         * @description Execute tool calls for voice mode - accepts external task ID and array of tool calls
         */
        post: operations["execute_tool_calls_task__task_id__tool_calls_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/openai-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Openai Session */
        get: operations["get_openai_session_auth_openai_session_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BashToolInput */
        BashToolInput: {
            /** Command */
            command?: string | null;
            /**
             * Restart
             * @default false
             */
            restart: boolean;
            /** Description */
            description?: string | null;
        };
        /** CreateCommand */
        CreateCommand: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            command: "create";
            /** Path */
            path: string;
            /** File Text */
            file_text: string;
        };
        /** ErrorEvent */
        ErrorEvent: {
            /**
             * Type
             * @default error
             * @constant
             */
            type: "error";
            /** Error Message */
            error_message: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InsertCommand */
        InsertCommand: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            command: "insert";
            /** Path */
            path: string;
            /** Insert Line */
            insert_line: number;
            /** Insert Text */
            insert_text: string;
        };
        /** MessageCreate */
        MessageCreate: {
            /** Text */
            text: string;
        };
        /** MessagePublic */
        MessagePublic: {
            /** Id */
            id: string;
            /**
             * Role
             * @enum {string}
             */
            role: "user" | "assistant";
            /** Content */
            content: (components["schemas"]["ToolInputBlock-Output"] | components["schemas"]["ToolResultBlock"] | components["schemas"]["TextBlock"])[];
        };
        /** MessageStartEvent */
        MessageStartEvent: {
            /**
             * Type
             * @default message_start
             * @constant
             */
            type: "message_start";
            /** Message Id */
            message_id?: string;
        };
        /** MessageStopEvent */
        MessageStopEvent: {
            /**
             * Type
             * @default message_stop
             * @constant
             */
            type: "message_stop";
        };
        /** ProjectPublic */
        ProjectPublic: {
            /** Id */
            id: string;
            /** Repo Name */
            repo_name: string;
            /** Repo Html Url */
            repo_html_url: string;
            /** Rules File Path */
            rules_file_path: string;
            /** Setup Script Path */
            setup_script_path: string;
        };
        /** StrReplaceCommand */
        StrReplaceCommand: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            command: "str_replace";
            /** Path */
            path: string;
            /** Old Str */
            old_str: string;
            /** New Str */
            new_str: string;
        };
        /** TaskCreate */
        TaskCreate: {
            /** Description */
            description: string;
            /** Project Id */
            project_id: string;
            /** Gh Access Token */
            gh_access_token: string;
            /**
             * Voice Mode
             * @default false
             */
            voice_mode: boolean;
        };
        /** TaskPublic */
        TaskPublic: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Description */
            description: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Status
             * @enum {string}
             */
            status: "running" | "pending_review" | "completed";
        };
        /** TextBlock */
        TextBlock: {
            /**
             * Type
             * @default text
             * @constant
             */
            type: "text";
            /** Text */
            text: string;
        };
        /** TextDeltaEvent */
        TextDeltaEvent: {
            /**
             * Type
             * @default text_delta
             * @constant
             */
            type: "text_delta";
            /** Text */
            text: string;
        };
        /** ToolInputBash */
        ToolInputBash: {
            /**
             * Type
             * @default tool_input
             * @constant
             */
            type: "tool_input";
            /** Tool Id */
            tool_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            tool_name: "bash";
            tool_input: components["schemas"]["BashToolInput"];
        };
        /** ToolInputBlock */
        "ToolInputBlock-Input": components["schemas"]["ToolInputBash"] | components["schemas"]["ToolInputTextEditor"] | components["schemas"]["ToolInputSetup"];
        /** ToolInputBlock */
        "ToolInputBlock-Output": components["schemas"]["ToolInputBash"] | components["schemas"]["ToolInputTextEditor"] | components["schemas"]["ToolInputSetup"];
        /** ToolInputSetup */
        ToolInputSetup: {
            /**
             * Type
             * @default tool_input
             * @constant
             */
            type: "tool_input";
            /** Tool Id */
            tool_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            tool_name: "setup";
            /** Tool Input */
            tool_input: string;
        };
        /** ToolInputTextEditor */
        ToolInputTextEditor: {
            /**
             * Type
             * @default tool_input
             * @constant
             */
            type: "tool_input";
            /** Tool Id */
            tool_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            tool_name: "str_replace_based_edit_tool";
            /** Tool Input */
            tool_input: components["schemas"]["ViewCommand"] | components["schemas"]["StrReplaceCommand"] | components["schemas"]["CreateCommand"] | components["schemas"]["InsertCommand"];
        };
        /** ToolResultBlock */
        ToolResultBlock: {
            /**
             * Type
             * @default tool_result
             * @constant
             */
            type: "tool_result";
            /** Tool Id */
            tool_id: string;
            /** Tool Result */
            tool_result: string;
            /**
             * Is Error
             * @default false
             */
            is_error: boolean;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** ViewCommand */
        ViewCommand: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            command: "view";
            /** Path */
            path: string;
            /** View Range */
            view_range?: number[] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_projects_project_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectPublic"][];
                };
            };
        };
    };
    create_project_project_post: {
        parameters: {
            query: {
                repo_id: number;
                gh_token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project_settings_project__project_id__settings_post: {
        parameters: {
            query: {
                rules_file: string;
                setup_script: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tasks_project__project_id__tasks_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskPublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_task_task_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_task__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_events_task__task_id__events_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageStartEvent"] | components["schemas"]["MessageStopEvent"] | components["schemas"]["ErrorEvent"] | components["schemas"]["ToolInputBlock-Output"] | components["schemas"]["ToolResultBlock"] | components["schemas"]["TextDeltaEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_messages_task__task_id__messages_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessagePublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_message_task__task_id__messages_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MessageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    execute_tool_calls_task__task_id__tool_calls_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolInputBlock-Input"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolResultBlock"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_openai_session_auth_openai_session_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
}
